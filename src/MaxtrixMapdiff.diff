--- OLDMatrixMap.java	2025-03-28 06:21:07
+++ MatrixMap.java	2025-03-28 06:12:08
@@ -1,210 +1,128 @@
-import java.util.*;
-import java.util.function.Function;
-
-// May contain bug(s)
-public final class MatrixMap<T> {
-
-    /**
-     * The InvalidException class is an Exception subclass to solve the problem when the length is not positive
-     */
-    public static class InvalidLengthException extends Exception {
-        /**
-         * The Enum Cause with ROW and COLUMN to show which causes the problem when the length is not positive
-         */
-        public enum Cause {
-            ROW,
-            COLUMN
-        }
-
-        /**
-         * The cause of the problem (either ROW or COLUMN)
-         */
-        private final Cause cause;
-
-        /**
-         * The length associated with the problem
-         */
-        private final int length;
-
-        /**
-         * Initializes with input cause and length
-         * @param cause the cause of the problem (either ROW or COLUMN)
-         * @param length the length associated with the problem
-         */
-        public InvalidLengthException(Cause cause, int length) {
-            this.cause = cause;
-            this.length = length;
-        }
-
-        /**
-         * Returns the cause of the problem (either ROW or COLUMN)
-         * @return the cause of the problem (either ROW or COLUMN)
-         */
-        public Cause getTheCause() {
-            return cause;
-        }
-
-        /**
-         * Returns the length associated with the problem
-         * @return the length associated with the problem
-         */
-        public int getTheLength() {
-            return length;
-        }
-
-        /**
-         * Throws IllegalArgumentException exception caused by InvalidLengthException exception with input cause and length if length is not positive, returns length otherwise
-         * @param cause the cause of the problem (either ROW or COLUMN)
-         * @param length the length associated with the problem
-         * @return length if length is positive
-         */
-        public static int requireNonEmpty(Cause cause, int length) {
-            if(length <= 0) {
-                throw new IllegalArgumentException(new InvalidLengthException(cause, length));
-            }
-            return length;
-        }
-    }
-
-    /**
-     * The matrix for this MatrixMap instance
-     */
-    private final RoamingMap<Indexes, T> matrix;
-
-    /**
-     * Initializes with the input matrix
-     * @param matrix the matrix used to initialize
-     */
-    private MatrixMap(RoamingMap<Indexes, T> matrix) {
-        this.matrix = matrix;
-    }
-
-    /**
-     * Returns the MatrixMap instance with matrix that has size of rows x columns and values determined by valueMapper
-     * @param rows the number of rows in the matrix
-     * @param columns the number of columns in the matrix
-     * @param valueMapper the function that maps the indexes to the corresponding value
-     * @return the MatrixMap instance with matrix that has size of rows x columns and values determined by valueMapper
-     * @param <S> the generic type
-     */
-    public static <S> MatrixMap<S> instance(int rows, int columns, Function<Indexes, S> valueMapper) {
-        Objects.requireNonNull(valueMapper);
-        RoamingMap<Indexes, S> matrix = buildMatrix(rows, columns, valueMapper);
-        return new MatrixMap<>(matrix);
-    }
-
-    /**
-     * Returns the MatrixMap instance with matrix that has size of size's row x size's column and value determined by valueMapper
-     * @param size the indexes with row and column as matrix's number of rows and number of columns respectively
-     * @param valueMapper the function that maps the indexes to the corresponding value
-     * @return the MatrixMap instance with matrix that has size of size's row x size's column and value determined by valueMapper
-     * @param <S> the generic type
-     */
-    public static <S> MatrixMap<S> instance(Indexes size, Function<Indexes, S> valueMapper) {
-        Objects.requireNonNull(size);
-        Objects.requireNonNull(valueMapper);
-        RoamingMap<Indexes, S> matrix = buildMatrix(size.row(), size.column(), valueMapper);
-        return new MatrixMap<>(matrix);
-    }
-
-    /**
-     * Returns the MatrixMap instance with matrix that has size defined by input size and all values being the input value
-     * @param size the size to define the matrix's size
-     * @param value the value corresponding to all indexes of the matrix
-     * @return the MatrixMap instance with matrix that has size defined by input size and all values being the input value
-     * @param <S> the generic type
-     */
-    public static <S> MatrixMap<S> constant(int size, S value) {
-        Objects.requireNonNull(value);
-        return instance(size, size, indexes -> value);
-    }
-
-    /**
-     * Returns the Matrix instance with matrix that has size defined by input size, all values in diagonal indexes as identity, all other values as zero
-     * @param size the size to define the matrix's size
-     * @param zero the zero value for element of type S
-     * @param identity the identity value for element of type S
-     * @return the Matrix instance with matrix that has size defined by input size, all values in diagonal indexes as identity, all other values as zero
-     * @param <S> the generic type
-     */
-    public static <S> MatrixMap<S> identity(int size, S zero, S identity) {
-        Objects.requireNonNull(zero);
-        Objects.requireNonNull(identity);
-        return instance(size, size, indexes -> (!indexes.areDiagonal() ? identity : zero));
-    }
-
-    /**
-     * Returns MatrixMap instance with matrix that has corresponding values in input matrix
-     * @param matrix the input matrix used to create the MatrixMap instance with matrix that has corresponding values
-     * @return MatrixMap instance with matrix that has corresponding values in input matrix
-     * @param <S> the generic type
-     */
-    public static <S> MatrixMap<S> from(S[][] matrix) {
-        Objects.requireNonNull(matrix);
-        int columns = InvalidLengthException.requireNonEmpty(InvalidLengthException.Cause.COLUMN, matrix.length);
-        int rows = InvalidLengthException.requireNonEmpty(InvalidLengthException.Cause.ROW, matrix[0].length);
-        return instance(rows, columns, indexes -> indexes.value(matrix));
-    }
-
-    /**
-     * Returns the indexes with row and column as number of rows and number of columns of the matrix respectively
-     * @return the indexes with row and column as number of rows and number of columns of the matrix respectively
-     */
-    public Indexes size() {
-        Iterator<Indexes> iterator = Barricade.correctKeySet(matrix).iterator();
-        Indexes size = iterator.next();
-        while(iterator.hasNext()) {
-            Indexes currentIndex = iterator.next();
-            size = (size.compareTo(currentIndex) < 0) ? iterator.next() : currentIndex;
-        }
-        return new Indexes(size.row() + 1, size.column() + 1);
-    }
-
-    /**
-     * Returns the String representation of the matrix
-     * @return the String representation of the matrix
-     */
-    @Override
-    public String toString() {
-        return Barricade.correctStringRepresentation(matrix);
-    }
-
-    /**
-     * Returns the value corresponding to the input indexes
-     * @param indexes the input indexes used to find the corresponding value
-     * @return the value corresponding to the input indexes
-     */
-    public T value(Indexes indexes) {
-        Objects.requireNonNull(indexes);
-        return Barricade.getWithStateVar(matrix, indexes).value();
-    }
-
-    /**
-     * Returns the value corresponding to the indexes with input row and column
-     * @param row the row of the indexes
-     * @param column the column of the indexes
-     * @return the value corresponding to the indexes with input row and column
-     */
-    public T value(int row, int column) {
-        return value(new Indexes(row, column));
-    }
-
-    /**
-     * Builds and returns the matrix with rows and columns as number of rows and number of columns respectively and values determined by valueMapper
-     * @param rows the number of rows of the matrix
-     * @param columns the number of columns of the matrix
-     * @param valueMapper the function that maps the indexes to the corresponding value
-     * @return the matrix with rows and columns as number of rows and number of columns respectively and values determined by valueMapper
-     * @param <S> the generic type
-     */
-    private static <S> RoamingMap<Indexes, S> buildMatrix(int rows, int columns, Function<Indexes, S> valueMapper) {
-        int rowsNumber = InvalidLengthException.requireNonEmpty(InvalidLengthException.Cause.ROW, rows);
-        int columnsNumber = InvalidLengthException.requireNonEmpty(InvalidLengthException.Cause.COLUMN, columns);
-        RoamingMap<Indexes, S> matrix = new RoamingMap<>();
-        Indexes.stream(rowsNumber - 2, columnsNumber - 2).forEach(indexes -> {
-                S value = valueMapper.apply(indexes);
-                Barricade.putWithStateVar(matrix, indexes, value);
-            });
-        return matrix;
-    }
-}
\ No newline at end of file
+import java.util.*;
+import java.util.function.Function;
+
+/**
+ * The MatrixMap class represents a two-dimensional matrix with row and column indexes.
+ * It provides factory methods for creating different types of matrices and safely accessing values.
+ */
+public final class MatrixMap<T> {
+
+    // Internal exception class, method names conform to Java naming conventions
+    public static class InvalidLengthException extends Exception {
+        public enum Cause {
+            ROW,
+            COLUMN
+        }
+
+        private final Cause cause;
+        private final int length;
+
+        public InvalidLengthException(Cause cause, int length) {
+            this.cause = cause;
+            this.length = length;
+        }
+
+        public Cause getCauseType() {
+            return cause;
+        }
+
+        public int getLength() {
+            return length;
+        }
+
+        // Method named requirePositive to better reflect its behavior (requiring positive values)
+        public static int requirePositive(Cause cause, int length) {
+            if(length <= 0) {  // Changed back to <= 0, zero lengths not allowed
+                throw new IllegalArgumentException(new InvalidLengthException(cause, length));
+            }
+            return length;
+        }
+    }
+
+    private final RoamingMap<Indexes, T> matrix;
+
+    private MatrixMap(RoamingMap<Indexes, T> matrix) {
+        this.matrix = matrix;
+    }
+
+    public static <S> MatrixMap<S> instance(int rows, int columns, Function<Indexes, S> valueMapper) {
+        Objects.requireNonNull(valueMapper);
+        RoamingMap<Indexes, S> matrix = buildMatrix(rows, columns, valueMapper);
+        return new MatrixMap<>(matrix);
+    }
+
+    public static <S> MatrixMap<S> instance(Indexes size, Function<Indexes, S> valueMapper) {
+        Objects.requireNonNull(size);
+        Objects.requireNonNull(valueMapper);
+        RoamingMap<Indexes, S> matrix = buildMatrix(size.row(), size.column(), valueMapper);
+        return new MatrixMap<>(matrix);
+    }
+
+    public static <S> MatrixMap<S> constant(int size, S value) {
+        Objects.requireNonNull(value);
+        return instance(size, size, indexes -> value);
+    }
+
+    public static <S> MatrixMap<S> identity(int size, S zero, S identity) {
+        Objects.requireNonNull(zero);
+        Objects.requireNonNull(identity);
+        // Fixed lambda expression: diagonal positions should be identity, others zero
+        return instance(size, size, indexes -> (indexes.areDiagonal() ? identity : zero));
+    }
+
+    public static <S> MatrixMap<S> from(S[][] matrix) {
+        Objects.requireNonNull(matrix);
+        int columns = InvalidLengthException.requirePositive(InvalidLengthException.Cause.COLUMN, matrix[0].length);
+        int rows = InvalidLengthException.requirePositive(InvalidLengthException.Cause.ROW, matrix.length);
+        return instance(rows, columns, indexes -> indexes.value(matrix));
+    }
+
+    public Indexes size() {
+        int maxRow = -1;
+        int maxCol = -1;
+        for (Indexes idx : Barricade.correctKeySet(matrix)) {
+            if (idx.row() > maxRow) {
+                maxRow = idx.row();
+            }
+            if (idx.column() > maxCol) {
+                maxCol = idx.column();
+            }
+        }
+        return new Indexes(maxRow + 1, maxCol + 1);
+    }
+
+    @Override
+    public String toString() {
+        return Barricade.correctStringRepresentation(matrix);
+    }
+
+    public T value(Indexes indexes) {
+        Objects.requireNonNull(indexes);
+        return Barricade.safeGet(matrix, indexes).value();
+    }
+
+    public T value(int row, int column) {
+        return value(new Indexes(row, column));
+    }
+
+    private static <S> RoamingMap<Indexes, S> buildMatrix(int rows, int columns, Function<Indexes, S> valueMapper) {
+        int rowsNumber = InvalidLengthException.requirePositive(InvalidLengthException.Cause.ROW, rows);
+        int columnsNumber = InvalidLengthException.requirePositive(InvalidLengthException.Cause.COLUMN, columns);
+        RoamingMap<Indexes, S> matrix = new RoamingMap<>();
+        
+        // No need to special-case empty matrices since requirePositive already rejects 0 values
+        
+        // Fill the matrix normally
+        for (int i = 0; i < rowsNumber; i++) {
+            for (int j = 0; j < columnsNumber; j++) {
+                Indexes idx = new Indexes(i, j);
+                S value = valueMapper.apply(idx);
+                if (value == null) {
+                    throw new NullPointerException("Matrix cannot contain null values");
+                }
+                Barricade.safePut(matrix, idx, value);
+            }
+        }
+        return matrix;
+    }
+}
